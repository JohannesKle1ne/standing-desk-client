ssh johannes@192.168.178.69

cd Documents/Code

v12.22.12 -> working socket library (current version works aswell)


C:\Users\jojok\Documents\Uni\Master\Semester_3\PWP\Exercise4\mosquitto-broker
mosquitto -v -c test.conf

sudo poweroff



________________

Learnings:
- Zugang zu Server ist nur mit key file auf PC zugänglich
- Datenbank und Server sollen auf uni Server laufen
- Broker läut auf Server und alle Tische verbinden sind dorthin
- Mein Tisch sendet nurup/down. Logik wird im keypad gemacht.


Todos:

- compare MQTT to Socket Connection (sind nachrichten verschlüsselt?)
- get motionsensor running with configuration (Distance, Accuracy)
- Think about status status LEDS 
- create Captive portal (with library)
- frontend: Look into "Dropbox like" application
 -> c# new NotifyIcon
 -> pystray could be platform independant


Learnings motionsensor:

sensitivity potentiometer: shortest distance (3 meter) when turned to 10:00 o'clock (7:00-10:00 no detection at all) -> the minimum distance of 3 meters is probalby to short!

delay potentiometer: if delay increased the sensor keeps up the detection signal a longer period. 
So the python library will find motion a lot of times after motion was detected.-> short delay seems to be more useful

Non-repeatable Trigger: After detecting motion and triggering the output high, the sensor will automatically switch to a low state after the delay time is over, 
regardless of any ongoing motion in its sensing range.

Repeatable Trigger: If there is continuous motion in the sensor's range, the output will remain high. 
The delay time will be extended automatically for each subsequent motion event, starting from the last event.


Next: Create a repository where you commit these notes and code!

Todos Donnerstag:
- find alternative motion sensor
- think about how a server monitor could look like
- build a dropbox like interface for elektron app

Findings:
- how about putting the sonsor to the floor so only feet movement is detected?
- there is an open source version of HiveMQ that can be run on a private server
- there is a very usul "reconnectPeriod: 1000" in node mqtt
- shut down PI: sudo poweroff
- reboot PI: sudo reboot
- tutorial for PI: sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
- Wenn Iphone für Hotspot benutzen -> kompatibilität maximieren ON
- Achtung: die Ip adressen variieren natürlich wenn sich pi und client in neuen netzwerk befinden
- Die Syntax in /wpa_supplicant.conf ist wichtig (Anführungszeichen, Spaces)
-> Letzte Funktionierende Version:

ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=DE

network={
        ssid="Soul7"
        psk="52868737320352956218"
        key_mgmt=WPA-PSK
}

network={
        ssid="iPhoneJohannes"
        psk="12121212"
}


TODOS morgen (03.02):
Do the following tasks from nodejs within electron:
- try to connect to PI (specific topic with response)
- if not connected try to reach pi over ssh (repeat this process)
- when connected with ssh set wifi credentials on pi -> then reboot and check mqtt again

Findings:
- Pi needs at least 2 min to startup!
- to connect to pi AP: ssh johannes@10.0.0.5
- do not try any connection attemps before pi has fully booted otherwise pi crashes
- changing the autohotspot file was leading to faild wifi connection (better don't touch it)
- added webserver.py and mqtt_client.py to rc.local to start them on boot
- on the long run creating a cron job for autohotspot will be good

TODOS morgen (04.02):
- create input fields for wifi credentails
- test AP once again by deleting current wifi credentails and sending new
- test if it works with IPhone hotsport (can be used for demo!)
- Goal: be able to present: 
1. Electron client that start from .exe and created system tray
2. Electron client connecting to broker
3. Electron client that connects to PI in AP mode
4. Electron client that sets the correct wifi credentails
5. pi in AP mode 
6. pi in Mqtt mode
- If time: create status LED for "AP mode", "Internet Connection mode" and "Mqtt mode"

Finding:
- Added cron timer to check for wifi every minute
- electron build command for windows: npm run build:win (must be run as administrator)
- To manually start the scripts:
sudo python /home/johannes/Documents/Code/webserver.py
sudo python /home/johannes/Documents/Code/mqtt_client.py
- Goals reached:
1. Connection process works (above poython files are called on startup, cron timer calls hotspot script every minute)
2. Without he need of ssh wifi van be configured using the electron client



